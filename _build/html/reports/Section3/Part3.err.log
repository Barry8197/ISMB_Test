Traceback (most recent call last):
  File "C:\Users\Barry\anaconda3\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\Barry\anaconda3\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.model_selection import train_test_split

device = ('cuda' if torch.cuda.is_available() else 'cpu') # Set the device to GPU if available else CPU

g = g.to(device) # Move the graph to the device

# Get the node labels from the meta data, order by network nodes and reset the index
node_subjects = phenotypes['Smoking'].iloc[g.ndata['idx'].detach().cpu().numpy()].reset_index(drop=True) # Get node target labels from meta data 
node_subjects.name = 'Smoking'

GCN_input_shapes = g.ndata['feat'].shape[1] # Get the input shape of the GCN model

labels = F.one_hot(g.ndata['label'].to(torch.int64)) # Encode the labels as one hot vectors

output_metrics = []
logits = np.array([])
labels_all = np.array([])

train_tmp_index , test_index = train_test_split(                    # Split the data into a temporary training and test set
    node_subjects.index, train_size=0.6, stratify=node_subjects
    )
train_index , val_index = train_test_split(                         # Split the temporary training set into a training and validation set
    train_tmp_index, train_size=0.8, stratify=node_subjects.loc[train_tmp_index]
    )

model = GCN(GCN_input_shapes, len(node_subjects.unique()), hidden_feats=[128 , 32]).to(device) # Create the GCN model
print(model)
print(g)

loss_plot = train(g, g.ndata['feat'] , train_index , val_index , device ,  model , labels , 2000 , 1e-3) # Train the model
plt.show()

test_output_metrics = evaluate(test_index , device , g , g.ndata['feat'] , model , labels ) # Evaluate the model on the test set

# Print the test accuracy and F1 score
print(
    "GNN Model | Test Accuracy = {:.4f} | F1 = {:.4f} |".format(
     test_output_metrics[1] , test_output_metrics[2] )
)
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mTypeError[0m                                 Traceback (most recent call last)
Input [1;32mIn [7][0m, in [0;36m<cell line: 26>[1;34m()[0m
[0;32m     19[0m train_tmp_index , test_index [38;5;241m=[39m train_test_split(                    [38;5;66;03m# Split the data into a temporary training and test set[39;00m
[0;32m     20[0m     node_subjects[38;5;241m.[39mindex, train_size[38;5;241m=[39m[38;5;241m0.6[39m, stratify[38;5;241m=[39mnode_subjects
[0;32m     21[0m     )
[0;32m     22[0m train_index , val_index [38;5;241m=[39m train_test_split(                         [38;5;66;03m# Split the temporary training set into a training and validation set[39;00m
[0;32m     23[0m     train_tmp_index, train_size[38;5;241m=[39m[38;5;241m0.8[39m, stratify[38;5;241m=[39mnode_subjects[38;5;241m.[39mloc[train_tmp_index]
[0;32m     24[0m     )
[1;32m---> 26[0m model [38;5;241m=[39m [43mGCN[49m[43m([49m[43mGCN_input_shapes[49m[43m,[49m[43m [49m[38;5;28;43mlen[39;49m[43m([49m[43mnode_subjects[49m[38;5;241;43m.[39;49m[43munique[49m[43m([49m[43m)[49m[43m)[49m[43m,[49m[43m [49m[43mhidden_feats[49m[38;5;241;43m=[39;49m[43m[[49m[38;5;241;43m128[39;49m[43m [49m[43m,[49m[43m [49m[38;5;241;43m32[39;49m[43m][49m[43m)[49m[38;5;241m.[39mto(device) [38;5;66;03m# Create the GCN model[39;00m
[0;32m     27[0m [38;5;28mprint[39m(model)
[0;32m     28[0m [38;5;28mprint[39m(g)

[1;31mTypeError[0m: __init__() got multiple values for argument 'hidden_feats'
TypeError: __init__() got multiple values for argument 'hidden_feats'

