Traceback (most recent call last):
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\client.py", line 730, in _async_poll_for_reply
    msg = await ensure_async(self.kc.shell_channel.get_msg(timeout=new_timeout))
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\util.py", line 96, in ensure_async
    result = await obj
  File "C:\Users\Barry\anaconda3\lib\site-packages\jupyter_client\asynchronous\channels.py", line 48, in get_msg
    raise Empty
_queue.Empty

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Barry\anaconda3\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\Barry\anaconda3\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\client.py", line 949, in async_execute_cell
    exec_reply = await self.task_poll_for_reply
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\client.py", line 754, in _async_poll_for_reply
    await self._async_handle_timeout(timeout, cell)
  File "C:\Users\Barry\anaconda3\lib\site-packages\nbclient\client.py", line 801, in _async_handle_timeout
    raise CellTimeoutError.error_from_timeout_and_cell(
nbclient.exceptions.CellTimeoutError: A cell timed out while it was being executed, after 30 seconds.
The message was: Cell execution timed out.
Here is a preview of the cell contents:
-------------------
from sklearn.linear_model import LogisticRegression # Import the logistic regression model from sklearn

y_vals = labels.detach().cpu().numpy() # Get the labels as numpy arrays
input_data = g.ndata['feat'].detach().cpu().numpy() # Get the input features as numpy arrays

glmnet = LogisticRegression(penalty='l1' , solver='saga', max_iter = 1000 ) # Create a logistic regression model with L1 regularization
glmnet.fit(input_data[train_index] , y_vals[train_index][: , 0]) # Fit the logistic regression model
glmnet_acc = glmnet.score(input_data[test_index] , y_vals[test_index][: , 0]) # Get the accuracy of the logistic regression model on the test set
print(f'Baseline Logistic Regression ACC : {glmnet_acc}') # Print the accuracy of the logistic regression model
-------------------

